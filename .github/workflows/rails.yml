name: Rails test and deploy

on:
  workflow_call:
    inputs:
      cve-ignorelist:
        description: "space-delimited string of CVEs to ignore"
        type: string
        required: false
        default: ""
      coyote-integration-tests:
        description: "Does the repo need to run coyote integration tests?"
        type: boolean
        required: false
        default: false

jobs:
  test-and-deploy:
    runs-on: self-hosted
    env:
      RAILS_ENV: test
      DATABASE_URL: 'mysql2://127.0.0.1' # shogo82148/actions-setup-mysql@v1 doesn't work with socket
    steps:
      - uses: tedconf/setup-ruby@1.0.0
      - name: Update bundle-audit
        run: bundle exec bundle-audit update
      - name: Gem audit (with CVE ignorelist)
        if: inputs.cve-ignorelist != ''
        run: |
          bundle exec bundler audit --ignore ${{ inputs.cve-ignorelist }}
      - name: Gem audit (without CVE ignorelist)
        if: inputs.cve-ignorelist == ''
        run: bundle exec bundler audit
      - name: Scan code for vulnerabilities
        run: |
          bundle exec brakeman -q -w2
      - name: Run rubocop linters
        run: |
          bundle exec rubocop --parallel
      - name: Set up test secrets
        run: cp config/secrets.github.yml config/secrets.yml
      - name: Setup MySQL
        # Workaround for MySQL in ACT until
        # https://bugs.launchpad.net/ubuntu/focal/+source/mysql-8.0/+bug/1899248 is
        # released
        if: env.ACT
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          root-password: root
      - name: Start MySQL
        if: ${{ !env.ACT }}
        run: sudo /etc/init.d/mysql start
      - name: Create DB
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
      - name: Run tests
        run: |
          bundle exec rspec
      # prevent accidentally leaking secrets
      - name: Remove test secrets
        run: |
          rm config/secrets.yml
      - name: Import GPG key
        if: ${{ !env.ACT }}
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.RAILS_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.RAILS_GPG_PASSPHRASE }}
      - name: Add gateway to known hosts
        if: ${{ (github.ref == 'refs/heads/master' || contains(github.ref, 'fbranch')) && !env.ACT }}
        env:
          TED_SSH_PORT: ${{ secrets.TED_SSH_PORT }}
          TED_BASTION_HOST_NAME: ${{ secrets.TED_BASTION_HOST_NAME }}
        run: |
          ssh-keyscan -p $TED_SSH_PORT $TED_BASTION_HOST_NAME >> ~/.ssh/known_hosts
      - name: Feature branch upload configuration
        if: ${{ !env.ACT && contains(github.ref, 'fbranch') }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEDCONF_GH_ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEDCONF_GH_ACTIONS_AWS_SECRET_ACCESS_KEY }}
        # suppress tty output
        shell: 'script --return --quiet --command "bash {0}"'
        run: |
          bundle exec cap staging git:${GITHUB_REF##*/} nginx:upload_site_config unicorn:upload_initd
      - name: Stage branch
        if: ${{ (github.ref == 'refs/heads/master' || contains(github.ref, 'fbranch')) && !env.ACT }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEDCONF_GH_ACTIONS_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEDCONF_GH_ACTIONS_AWS_SECRET_ACCESS_KEY }}
        # supress tty output
        shell: 'script --return --quiet --command "bash {0}"'
        run: |
          bundle exec cap staging git:${GITHUB_REF##*/} deploy unicorn:restart nginx:reload with_database=false create_dns=true
